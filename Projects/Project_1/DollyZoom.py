# -*- coding: utf-8 -*-
"""DollyZoom_AyushGoel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykvCma9lBBMuCr-qYHQ8xtsEi0BnZvq8
"""

import numpy as np

def compute_focal_length( d_ref, f_ref, pos ):
    """
    compute camera focal length using given camera position

    Input:
    - d_ref: 1 by 1 double, distance of the object whose size remains constant
    - f_ref: 1 by 1 double, previous camera focal length
    - pos: 1 by n, each element represent camera center position on the z axis.
    Output:
    - f: 1 by n, camera focal length
    """

    """
    Using the formula,
    y_img = f * (Y / Z) = f_m * (Y / (Z - pos))
    and rearranging the terms.
    """
    f = f_ref * ((d_ref - pos) / d_ref)
    
    return f

def compute_f_pos(d1_ref, d2_ref, H1, H2, ratio, f_ref):
    """ 
    Compute camera focal length and camera position to achieve certain ratio
    between objects

    Input:
    - d1_ref: distance of the first object
    - d2_ref: distance of the second object
    - H1: height of the first object in physical world
    - H2: height of the second object in physical world
    - ratio: ratio between two objects (h1'/h2')
    - f_ref: 1 by 1 double, previous camera focal length
    Output:
    - f: 1 by 1, camera focal length
    - pos: 1 by 1, camera position
    """

    """
    h1 = f_ref * (H1 / d1_ref)
    h1' = f * (H1 / (d1_ref - pos))

    h2 = f_ref * (H2 / d2_ref)
    h2' = f * (H2 / (d2_ref - pos))

    ratio = h1' / h2'

    => (H1 * (d2_ref - pos)) / (H2 * (d1_ref - pos)) = ratio

    Rearranging to get pos
    """

    pos = (H1 * d2_ref - d1_ref * H2 * ratio) / (H1 - H2 * ratio)

    """
    h1 = h1'
    => f_ref * (H1 / d1_ref) = f * (H1 / (d1_ref - pos))
    Rearranging to get f
    """
    f = f_ref * ((d1_ref - pos) / d1_ref)

    return f, pos

'''
Test Case 1
'''
d_ref = 4
f_ref = 400
pos = -5
f = compute_focal_length(d_ref, f_ref, pos)  
assert np.isclose(f, 900), "Your computation of the focal length is off."
print('test passed')

'''
Test Case 2
'''
d1_ref = 4
d2_ref = 20
H1 = 4
H2 = 6
ratio = 2
f_ref = 400
f, pos = compute_f_pos( d1_ref, d2_ref, H1, H2, ratio, f_ref ) 
assert np.isclose(f, 800), "Your computation of the focal length is off. Hint: h1/h2 != H1/H2"
assert np.isclose(pos, -4), "Your computation of the position is off. Hint: h1/h2 != H1/H2"
print('test passed')